package com.AirplaneCoordinates.Core.PreciseDecimal;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

public final class PreciseDecimalTrigonometryTest {
    @Test
    public final void sin() {
        assertEquals(
            PreciseDecimal.from(0).sin().toString(),
            PreciseDecimal.from("0").toString()
        );
        assertEquals(
            PreciseDecimal.from(1).sin().toString(),
            PreciseDecimal.from("0.8414709848078965066525023216302989996225630607983710656727517099919104043912396689486397435430526959").toString()
        );
        assertEquals(
            PreciseDecimal.from(2).sin().toString(),
            PreciseDecimal.from("0.9092974268256816953960198659117448427022549714478902683789730115309673015407835446201266889249593803").toString()
        );
        assertEquals(
            PreciseDecimal.from(3).sin().toString(),
            PreciseDecimal.from("0.1411200080598672221007448028081102798469332642522655841518826412324220099670144719112821728534498638").toString()
        );
        assertEquals(
            PreciseDecimal.from(4).sin().toString(),
            PreciseDecimal.from("-0.7568024953079282513726390945118290941359128873364725714854167734013104936191794164235728105624227481").toString()
        );
        assertEquals(
            PreciseDecimal.from(5).sin().toString(),
            PreciseDecimal.from("-0.9589242746631384688931544061559939733524615439646017781316724542351025580865596030769959554295328666").toString()
        );
        assertEquals(
            PreciseDecimal.from(6).sin().toString(),
            PreciseDecimal.from("-0.2794154981989258728115554466118947596279948643182043184833513696533111540586443348546689384528422476").toString()
        );
        assertEquals(
            PreciseDecimal.from(7).sin().toString(),
            PreciseDecimal.from("0.6569865987187890903969990915936351779368700104974900746578543341892928371312270315099351216010552127").toString()
        );
    }

    @Test
    public final void cos() {
        assertEquals(
            PreciseDecimal.from(0).cos().toString(),
            PreciseDecimal.from(1).toString()
        );
        assertEquals(
            PreciseDecimal.from(1).cos().toString(),
            PreciseDecimal.from("0.5403023058681397174009366074429766037323104206179222276700972553811003947744717645179518560871830893").toString()
        );
        assertEquals(
            PreciseDecimal.from(2).cos().toString(),
            PreciseDecimal.from("-0.4161468365471423869975682295007621897660007710755448907551499737819649361240791690745317778601691404").toString()
        );
        assertEquals(
            PreciseDecimal.from(3).cos().toString(),
            PreciseDecimal.from("-0.9899924966004454572715727947312613023936790966155883288140859329283291975131332204282944793556926022").toString()
        );
        assertEquals(
            PreciseDecimal.from(4).cos().toString(),
            PreciseDecimal.from("-0.6536436208636119146391681830977503814241335966462182470070102838527376558106033799012306456461788582").toString()
        );
        assertEquals(
            PreciseDecimal.from(5).cos().toString(),
            PreciseDecimal.from("0.2836621854632262644666391715135573083344225922522159449303590665861514567673827022861769816683445732").toString()
        );
        assertEquals(
            PreciseDecimal.from(6).cos().toString(),
            PreciseDecimal.from("0.9601702866503660205456522979229244054519376792110126981292864260535458585549931066464416113637612995").toString()
        );
        assertEquals(
            PreciseDecimal.from(7).cos().toString(),
            PreciseDecimal.from("0.7539022543433046381411975217191820122183133914601268395436138808138760267207174056254283910893024825").toString()
        );
    }

    @Test
    public final void tan() {
        assertEquals(
            PreciseDecimal.from(1).tan().toString(),
            PreciseDecimal.from("1.557407724654902230506974807458360173087250772381520038383946605698861397151727289555099965202242984").toString()
        );
        assertEquals(
            PreciseDecimal.from(2).tan().toString(),
            PreciseDecimal.from("-2.185039863261518991643306102313682543432017746227663164562955869966773747209194182319743542104728548").toString()
        );
        assertEquals(
            PreciseDecimal.from(3).tan().toString(),
            PreciseDecimal.from("-0.1425465430742778052956354105339134932260922849018046476332389766888585952215385380591060583477669114").toString()
        );
        assertEquals(
            PreciseDecimal.from(4).tan().toString(),
            PreciseDecimal.from("1.157821282349577583137342418267323923119762767367142130084857189358985762063503791325897570132020188").toString()
        );
        assertEquals(
            PreciseDecimal.from(5).tan().toString(),
            PreciseDecimal.from("-3.380515006246585636982705879447343908709569208285459877176820980918346010201206056831791856009410428").toString()
        );
        assertEquals(
            PreciseDecimal.from(6).tan().toString(),
            PreciseDecimal.from("-0.2910061913847491570536995888681755428311555709123391316088271933046559131122021519996248059475229616").toString()
        );
        assertEquals(
            PreciseDecimal.from(7).tan().toString(),
            PreciseDecimal.from("0.8714479827243187364564508896003135663222034245984200644480154523301674476556679351044748556811165168").toString()
        );
    }
    
    @Test
    public final void tanSpecialCases() {
        assertEquals(
            PreciseDecimal.from(0).tan().toString(),
            PreciseDecimal.from(0).toString()
        );
        assertEquals(
            PreciseDecimal.from("1.570796326794896619231321691639751442098584699687552910487472296153908203143104499314017412671058534").tan().toString(),
            PreciseDecimal.from("-112032808158913938772094286859147368891405526253541322435135714436774805871368562873093748017071649400").toString()
        );
        assertEquals(
            PreciseDecimal.halfPi().tan().toString(),
            PreciseDecimal.from("-112032808158913938772094286859147368891405526253541322435135714436774805871368562873093748017071649400").toString()
        );
        assertEquals(
            PreciseDecimal.pi().tan().toString(),
            PreciseDecimal.from(0).toString()
        );
        assertEquals(
            PreciseDecimal.threeQuartsPi().tan().toString(),
            PreciseDecimal.from("-37344269010629053986830498754167863778272117607896815375322900893940380370381984136818683625176921760").toString()
        );
    }

    @Test
    public final void atan() {
        assertEquals(
            PreciseDecimal.atan(
                PreciseDecimal.from(1),
                PreciseDecimal.from(1)
            ).toString(),
            PreciseDecimal.from("0.785398163397448309615660845819875721049292349843776455243736148076954101571552249657008706335529267").toString()
        );
        assertEquals(
            PreciseDecimal.atan(
                PreciseDecimal.from(3),
                PreciseDecimal.from(1)
            ).toString(),
            PreciseDecimal.from("1.24904577239825442582991707728109012307782940412989671905466923679715196573729395495760899032041716").toString()
        );
        assertEquals(
            PreciseDecimal.atan(
                PreciseDecimal.from(4),
                PreciseDecimal.from(2)
            ).toString(),
            PreciseDecimal.from("1.107148717794090503017065460178537040070047645401432646676539207433710338977362794013417128686170641").toString()
        );
        assertEquals(
            PreciseDecimal.atan(
                PreciseDecimal.from(8),
                PreciseDecimal.from(3)
            ).toString(),
            PreciseDecimal.from("1.212025656524324398835401627713290942321609043806637130847073429399205018921975170570753003401633161").toString()
        );
        assertEquals(
            PreciseDecimal.atan(
                PreciseDecimal.from(1),
                PreciseDecimal.from(2)
            ).toString(),
            PreciseDecimal.from("0.4636476090008061162142562314612144020285370542861202638109330887201978641657417053006002839848878926").toString()
        );
        assertEquals(
            PreciseDecimal.atan(
                PreciseDecimal.from(-8),
                PreciseDecimal.from(3)
            ).toString(),
            PreciseDecimal.from("-1.212025656524324398835401627713290942321609043806637130847073429399205018921975170570753003401633161").toString()
        );
    }
}
